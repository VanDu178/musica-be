const express = require("express");
const morgan = require("morgan"); //d√πng ƒë·ªÉ ghi log request
const cors = require("cors"); //ƒë·ªÉ be c√≥ th·ªÉ nh·∫≠n request t·ª´ fe
const mongoose = require("mongoose"); // ODM ƒë·ªÉ k·∫øt n·ªëi v√† l√†m vi·ªác v·ªõi MongoDB
require("dotenv").config(); // ƒê·ªçc c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
const indexRoutes = require("./routes/index.routes"); // Import router ch√≠nh
// const multer = require("multer");

const app = express();

// Error handling middleware
// app.use((err, req, res, next) => {
//   console.error(err.stack);
//   res.status(500).json({ message: "Something broke!" });
// });

// C·∫•u h√¨nh
//1:C·∫•u h√¨nh parser ƒë·ªÉ backend ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu JSON m√† frontend g·ª≠i l√™n (th∆∞·ªùng l√† POST, PUT).
//ƒê·ªçc trong body.req
app.use(express.json());

//2:C·∫•u h√¨nh cros ƒë·ªÉ be c√≥ th·ªÉ nh·∫≠n request t·ª´ fe
app.use(
  cors({
    origin: "http://localhost:3000", // ƒê·∫£m b·∫£o cho ph√©p frontend g·ª≠i request
    methods: ["GET", "POST", "PUT", "DELETE", "PATCH"], // C√°c ph∆∞∆°ng th·ª©c HTTP ƒë∆∞·ª£c ph√©p
    allowedHeaders: ["Content-Type", "Authorization"], // C√°c header ƒë∆∞·ª£c ph√©p
    credentials: true, // Cho ph√©p g·ª≠i cookie
  })
);
//3: C·∫•u h√¨nh morgan ƒë·ªÉ c√≥ th·ªÉ ghi log cho m·ªói request
app.use(morgan("dev"));

//4: C·∫•u h√¨nh router
app.use("/api", indexRoutes);

//5: C·∫•u h√¨nh database "K·∫øt n·ªëi MongoDB"
mongoose
  .connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.error("MongoDB connection error:", err));

//6: Thi·∫øt l·∫≠p Pug l√†m template engine
app.set("view engine", "pug");
app.set("views", "./views");

module.exports = app;

// Nhi·ªám v·ª• file index.js
// T·∫°o express() instance
// C·∫•u h√¨nh middleware (bodyParser, cors, logger, v.v)
// Thi·∫øt l·∫≠p c√°c route
// Thi·∫øt l·∫≠p middleware x·ª≠ l√Ω l·ªói
// Kh√¥ng l·∫Øng nghe c·ªïng (kh√¥ng .listen() ·ªü ƒë√¢y)
// üìå C√≥ th·ªÉ coi ƒë√¢y l√† ‚Äúapp logic‚Äù thu·∫ßn tu√Ω, ch∆∞a g·∫Øn v·ªõi c·ªïng n√†o.
// ·ªû file index.js ta ch·ªâ ƒëang c·∫•u h√¨nh cho object app
